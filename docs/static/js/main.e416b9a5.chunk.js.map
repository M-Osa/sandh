{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AccountContext","React","createContext","useAccount","useContext","AccountNameHook","account","console","log","name","AccountNamePureHook","memo","AccountNameVeryPureHook","useMemo","AccountNameProp","AccountNamePureProp","AccountNameVeryPureProp","prev","next","Account","PureContainerComponent","preference","className","prevProps","nextProps","ContainerComponent","App","useState","id","numberOfAppointments","setAccount","setPreference","appointments","setAppointments","Provider","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e416b9a5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst AccountContext = React.createContext()\nconst useAccount = () => React.useContext(AccountContext)\n\n\nconst AccountNameHook = () => {\n    const account = useAccount()\n    console.log('      rendering AccountNameHook')\n    return (<div>hook: {account.name}</div>)\n\n}\n\nconst AccountNamePureHook = React.memo(() => {\n    const account = useAccount()\n    console.log('      rendering AccountNamePureHook')\n    return (<div>pure hook: {account.name}</div>)\n\n})\n\nconst AccountNameVeryPureHook = () => {\n    const account = useAccount()\n\n    return React.useMemo(() => {\n            console.log('      rendering AccountNameVeryPureHook')\n            return <div>very pure hook: {account.name}</div>\n        }\n        , [account.name])\n}\n\nconst AccountNameProp = ({account}) => {\n    console.log('      rendering AccountNameProp')\n    return (<div>prop: {account.name}</div>)\n}\n\nconst AccountNamePureProp = React.memo(({account}) => {\n    console.log('      rendering AccountNamePureProp')\n    return (<div>pure prop: {account.name}</div>)\n})\n\nconst AccountNameVeryPureProp = React.memo(({account}) => {\n    console.log('      rendering AccountNameVeryPureProp')\n    return <div>very pure prop: {account.name}</div>\n},(prev, next)=> prev.account.name === next.account.name)\n\n\nconst Account = () => {\n    const account = useAccount()\n    console.log('    rendering Account')\n    return (\n        <>\n            <AccountNameHook/>\n            <AccountNamePureHook/>\n            <AccountNameVeryPureHook/>\n\n            <AccountNameProp account={account}/>\n            <AccountNamePureProp account={account}/>\n            <AccountNameVeryPureProp account={account}/>\n        </>\n    )\n}\n\n\n// shouldComponentNOTUpdate\nconst areEqualPreference = (prevProps, nextProps) => {\n    return prevProps.preference === nextProps.preference\n}\n\nconst PureContainerComponent = React.memo(({preference}) => {\n    console.log('  rendering Pure ContainerComponent')\n    return <div className='grand-parent'>\n        <p>Pure ContainerComponent:</p>\n        <Account preference={preference}/>\n    </div>\n}, areEqualPreference)\n\n\nconst ContainerComponent = ({preference}) => {\n    console.log('  rendering ContainerComponent')\n    return <div className='grand-parent'>\n        <p>ContainerComponent:</p>\n        <Account preference={preference}/>\n    </div>\n}\n\n\nfunction App() {\n    const [account, setAccount] = React.useState({id: 1, name: 'name', numberOfAppointments: 0})\n    const [preference, setPreference] = React.useState('pref')\n    const [appointments, setAppointments] = React.useState('appointments')\n    console.log('--------------------------------------------')\n    console.log('rendering App')\n    return (\n        <div className=\"App\">\n            <AccountContext.Provider value={account}>\n                <ContainerComponent preference={preference} appointments={appointments}/>\n                <hr/>\n                <PureContainerComponent preference={preference} appointments={appointments}/>\n                <button onClick={() => {\n                    console.log('**updating account name to ', account.name + '1');\n                    setAccount({...account, name: account.name + '1'})\n                }}>\n                    update name in account\n                </button>\n                <button onClick={() => {\n                    console.log('**updating account numberOfAppointments to ', account.numberOfAppointments + 1);\n                    setAccount({...account, numberOfAppointments: account.numberOfAppointments + 1})\n                }}>\n                    update number of appts in account\n                </button>\n                <button onClick={() => {\n                    console.log('**updating preference to ', preference + '2');\n                    setPreference(preference + '2')\n                }}>\n                    update preference\n                </button>\n                <button onClick={() => {\n                    console.log('**updating appointments to ', appointments + '3');\n                    setAppointments(appointments + '3')\n                }}>\n                    update appointments\n                </button>\n            </AccountContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}